using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Filters;
using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Authorization;
using SwaggerAndJwt.Controllers;
using SwaggerAndJwt.Helper;

namespace SwaggerAndJwt
{
    public class Startup
    {
        public Startup(IConfiguration configuration, IWebHostEnvironment env)
        {
            Configuration = configuration;
            Env = env;
        }

        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Env { get; }
        public string ApiName { get; set; } = "SwaggerAndJwt";

        // This method gets called by the runtime. Use this method to add services to the container.
        private static readonly string apiName = "swagger_api";
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton(new Appsettings(Env.ContentRootPath));

            //services.AddControllers();
            services.AddControllers(c => { c.Filters.Add(new AuthorizeFilter()); });//这一个配置表明全部都controller都需要经过验证，可以使用AllowAnonymous特性标记为无需验证
            #region IdentityServer配置
            var builder = services.AddIdentityServer()
                .AddInMemoryIdentityResources(IdentityServerConfig.GetIdentityResources())
                .AddInMemoryApiResources(IdentityServerConfig.GetApis())
                .AddInMemoryClients(IdentityServerConfig.GetClients())
                //.AddTestUsers(IdentityServerConfig.GetUsers());
                .AddResourceOwnerValidator<ResourceOwnerPasswordValidator>();
            builder.AddDeveloperSigningCredential();
            #endregion

            #region swagger配置
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("V1", new OpenApiInfo
                {
                    // {ApiName} 定义成全局变量，方便修改
                    Version = "V1",
                    Title = $"{ApiName} 接口文档――Netcore 3.1",
                    Description = $"{ApiName} HTTP API V1",
                    Contact = new OpenApiContact { Name = ApiName, Email = "邮箱地址@Email", Url = new Uri("http://连接地址.com") },
                    License = new OpenApiLicense { Name = ApiName, Url = new Uri("http://连接地址.com") }
                });
                c.OrderActionsBy(o => o.RelativePath);

                //这里配置显示summary注释，需要在属性――生成页面配置生成xml文件。同时可以在属性――生成页面设置忽略1591警告。
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                c.IncludeXmlComments(xmlPath, true);//默认的第二个参数是false，设置为true才可以显示controller的注释，记得修改

                //var xmlModelPath = Path.Combine(basePath, "其它类库.xml");//这里配置引用类库的swagger输出信息文档
                //c.IncludeXmlComments(xmlModelPath);

                //swagger开启jwt验证
                //开启权限小锁
                c.OperationFilter<AddResponseHeadersFilter>();
                c.OperationFilter<AppendAuthorizeToSummaryOperationFilter>();
                //在header中添加token，传递到后台
                c.OperationFilter<SecurityRequirementsOperationFilter>();
                c.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme
                {
                    Description = "JWT授权(数据将在请求头中进行传递)直接在下面框中输入Bearer {token}(注意两者之间是一个空格) \"",
                    Name = "Authorization",//jwt默认的参数名称
                    In = ParameterLocation.Header,//jwt默认存放Authorization信息的位置(请求头中)
                    Type = SecuritySchemeType.ApiKey
                });

            });
            #endregion

            #region jwt配置

            //读取配置文件
            //var symmetricKeyAsBase64 = AppSecretConfig.Audience_Secret_String;
            //var keyByteArray = Encoding.ASCII.GetBytes(symmetricKeyAsBase64);
            //var signingKey = new SymmetricSecurityKey(keyByteArray);
            //var Issuer = Appsettings.app(new string[] { "Authentication", "JwtBearer", "Issuer" });
            //var Audience = Appsettings.app(new string[] { "Authentication", "JwtBearer", "Audience" });

            //services.AddAuthentication(options =>
            //{
            //    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            //    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            //    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
            //}).AddJwtBearer(options =>
            //{
            //    options.SaveToken = true;
            //    options.RequireHttpsMetadata = false;
            //    options.TokenValidationParameters = new TokenValidationParameters()
            //    {
            //        //是否开启密钥认证和key值
            //        ValidateIssuerSigningKey = true,
            //        IssuerSigningKey = signingKey,

            //        //是否开启发行人认证和发行人
            //        ValidateIssuer = true,
            //        ValidIssuer = Issuer,

            //        //是否开启订阅人认证和订阅人
            //        ValidateAudience = true,
            //        ValidAudience = Audience,

            //        //认证时间的偏移量
            //        ClockSkew = TimeSpan.FromSeconds(30),//TimeSpan.Zero,
            //        //是否开启时间认证
            //        ValidateLifetime = true,

            //        //是否该令牌必须带有过期时间
            //        RequireExpirationTime = true
            //    };

            //    options.Events = new JwtBearerEvents
            //    {
            //        OnAuthenticationFailed = context =>
            //        {
            //            // 如果过期，则把<是否过期>添加到，返回头信息中
            //            if (context.Exception.GetType() == typeof(SecurityTokenExpiredException))
            //            {
            //                context.Response.Headers.Add("Token-Expired", "true");
            //            }
            //            return Task.CompletedTask;
            //        }
            //    };
            //});


            // 1【授权】、这个和[Authorize(Roles = "Admin")]的异曲同工，好处就是不用在controller中，写多个 roles 。
            // 然后这么写 [Authorize(Policy = "Admin")]
            //services.AddAuthorization(options =>
            //{
            //    options.AddPolicy("Client", policy => policy.RequireRole("Client").Build());//单独角色
            //    options.AddPolicy("Admin", policy => policy.RequireRole("Admin").Build());
            //    options.AddPolicy("SystemOrAdmin", policy => policy.RequireRole("Admin", "System"));//或的关系
            //    options.AddPolicy("SystemAndAdmin", policy => policy.RequireRole("Admin").RequireRole("System"));//且的关系
            //});
            #endregion


            services.AddAuthorization();
            services.AddAuthentication("Bearer")
                .AddIdentityServerAuthentication(options =>
                {
                    options.Authority = "http://localhost:3163";    //配置Identityserver的授权地址
                    options.RequireHttpsMetadata = false;           //不需要https    
                    options.ApiName = apiName;  //api的name，需要和config的名称相同
                });

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint($"/swagger/V1/swagger.json", $"{ApiName} V1");

                    //路径配置，设置为空，表示直接在根域名（localhost:8001）访问该文件,注意localhost:8001/swagger是访问不到的，去launchSettings.json把launchUrl去掉，如果你想换一个路径，直接写名字即可，比如直接写c.RoutePrefix = "doc";
                    c.RoutePrefix = string.Empty;
                });
            }

            app.UseIdentityServer();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
